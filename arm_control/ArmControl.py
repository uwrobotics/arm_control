"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class ArmControl(object):

    __slots__ = ["a1", "a2", "a3", "a4", "a5", "a6", "effector"]

    __typenames__ = ["float", "float", "float", "float", "float", "float", "float"]

    __dimensions__ = [None, None, None, None, None, None, None]

    def __init__(self):
        self.a1 = 0.0
        """ LCM Type: float """
        self.a2 = 0.0
        """ LCM Type: float """
        self.a3 = 0.0
        """ LCM Type: float """
        self.a4 = 0.0
        """ LCM Type: float """
        self.a5 = 0.0
        """ LCM Type: float """
        self.a6 = 0.0
        """ LCM Type: float """
        self.effector = 0.0
        """ LCM Type: float """

    def encode(self):
        buf = BytesIO()
        buf.write(ArmControl._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">fffffff", self.a1, self.a2, self.a3, self.a4, self.a5, self.a6, self.effector))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ArmControl._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ArmControl._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = ArmControl()
        self.a1, self.a2, self.a3, self.a4, self.a5, self.a6, self.effector = struct.unpack(">fffffff", buf.read(28))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if ArmControl in parents: return 0
        tmphash = (0x6fe6aa2c03f63b46) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if ArmControl._packed_fingerprint is None:
            ArmControl._packed_fingerprint = struct.pack(">Q", ArmControl._get_hash_recursive([]))
        return ArmControl._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", ArmControl._get_packed_fingerprint())[0]

